blueprint:
  name: Thermal Curve Device Control
  description: Adjust a device's power based on a temperature range
  domain: automation
  input:
    temp_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    device_entity:
      name: Target Device
      selector:
        entity:
    low_temp:
      name: Low Temp Threshold (°C)
      default: 20
      selector:
        number:
          min: 0
          max: 50
          step: 0.5
    high_temp:
      name: High Temp Threshold (°C)
      default: 25
      selector:
        number:
          min: 0
          max: 50
          step: 0.5

automation:
  trigger:
    - platform: state
      entity_id: !input temp_sensor
  condition: []
  action:
    - variables:
        temp: "{{ states(!input temp_sensor) | float }}"
        level: >
          {% set t = temp %}
          {% set low = !input.low_temp | float %}
          {% set high = !input.high_temp | float %}
          {% if t <= low %} 4
          {% elif t >= high %} -1
          {% else %}{{ (4 - ((t - low) / (high - low) * 4)) | round(0, 'floor') | int }}{% endif %}
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ level == -1 }}"
          sequence:
            - service: switch.turn_off
              target:
                entity_id: !input enable_switch
        - conditions:
            - condition: template
              value_template: "{{ level >= 0 }}"
          sequence:
            - service: switch.turn_on
              target:
                entity_id: !input enable_switch
            - service: number.set_value
              target:
                entity_id: !input device_entity
              data:
                value: "{{ level }}"